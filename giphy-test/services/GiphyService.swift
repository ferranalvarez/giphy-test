import UIKitlet API_KEY = "dc6zaTOxFJmzC"let limit = 20class Giphy {        let processingQueue = OperationQueue()        func searchGiphyForTerm(completion : @escaping (_ results: [GiphyPhoto]?, _ error : NSError?) -> Void){                guard let searchURL = giphySearchURL() else {            let APIError = NSError(domain: "GiphyAPI", code: 0, userInfo: [NSLocalizedFailureReasonErrorKey:"Error calling giphySearchURL()"])            completion(nil, APIError)            return        }                let searchRequest = URLRequest(url: searchURL)                URLSession.shared.dataTask(with: searchRequest, completionHandler: { (data, response, error) in                        if let _ = error {                let APIError = NSError(domain: "GiphyAPI", code: 0, userInfo: [NSLocalizedFailureReasonErrorKey:"Error calling searchRequest"])                OperationQueue.main.addOperation({                    completion(nil, APIError)                })                return            }                        guard let _ = response as? HTTPURLResponse,                let data = data else {                    let APIError = NSError(domain: "GiphyAPI", code: 0, userInfo: [NSLocalizedFailureReasonErrorKey:"Error getting data from HTTPURLResponse"])                    OperationQueue.main.addOperation({                        completion(nil, APIError)                    })                    return            }                        do {                                guard let resultsDictionary = try JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions(rawValue: 0)) as? [String: AnyObject],                    let stat = resultsDictionary["meta"] as? [String: AnyObject], let stat2 = stat["msg"] as? String else {                                                let APIError = NSError(domain: "GiphyAPI", code: 0, userInfo: [NSLocalizedFailureReasonErrorKey:"Error reading meta msg status"])                        OperationQueue.main.addOperation({                            completion(nil, APIError)                        })                        return                }                                switch (stat2) {                case "OK":                    print("Results processed OK")                case "fail":                    if let message = resultsDictionary["message"] {                        let APIError = NSError(domain: "GiphyAPI", code: 0, userInfo: [NSLocalizedFailureReasonErrorKey:message])                                                OperationQueue.main.addOperation({                            completion(nil, APIError)                        })                    }                                        let APIError = NSError(domain: "GiphyAPI", code: 0, userInfo: nil)                                        OperationQueue.main.addOperation({                        completion(nil, APIError)                    })                                        return                default:                    let APIError = NSError(domain: "GiphyAPI", code: 0, userInfo: [NSLocalizedFailureReasonErrorKey:"Error reading message"])                    OperationQueue.main.addOperation({                        completion(nil, APIError)                    })                    return                }                                guard let photosContainer = resultsDictionary["data"] as? [[String: AnyObject]] else {                                        let APIError = NSError(domain: "GiphyAPI", code: 0, userInfo: [NSLocalizedFailureReasonErrorKey:"Error parsing data"])                    OperationQueue.main.addOperation({                        completion(nil, APIError)                    })                    return                }                                var giphyPhotos = [GiphyPhoto]()                                for photoObject in photosContainer {                                        let imageArray = photoObject["images"] as? [String: AnyObject]                    let gifUrl = imageArray?.first?.value["url"] as! String                                        let giphyPhoto = GiphyPhoto(url: gifUrl )                                                                  giphyPhoto.thumbnail = UIImage.gifImageWithURL(gifUrl: gifUrl)                        giphyPhotos.append(giphyPhoto)                                        }                                                OperationQueue.main.addOperation({                    completion(giphyPhotos, nil)                })                            } catch _ {                completion(nil, nil)                return            }                                }) .resume()    }        fileprivate func giphySearchURL() -> URL? {                //let URLString = "http://api.giphy.com/v1/gifs/trending?api_key=\(API_KEY)&limit=\(limit)"        let URLString = "http://api.giphy.com/v1/gifs/search?q=random&api_key=\(API_KEY)&limit=\(limit)"                print(URLString);        guard let url = URL(string:URLString) else {            return nil        }                return url    }}